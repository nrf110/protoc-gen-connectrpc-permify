// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: test/v1/deep_nesting.proto

package testv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
	v1 "test/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// DeepNestingServiceName is the fully-qualified name of the DeepNestingService service.
	DeepNestingServiceName = "test.v1.DeepNestingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeepNestingServiceProcessDeepNestedProcedure is the fully-qualified name of the
	// DeepNestingService's ProcessDeepNested RPC.
	DeepNestingServiceProcessDeepNestedProcedure = "/test.v1.DeepNestingService/ProcessDeepNested"
	// DeepNestingServiceProcessVeryDeepProcedure is the fully-qualified name of the
	// DeepNestingService's ProcessVeryDeep RPC.
	DeepNestingServiceProcessVeryDeepProcedure = "/test.v1.DeepNestingService/ProcessVeryDeep"
)

// DeepNestingServiceClient is a client for the test.v1.DeepNestingService service.
type DeepNestingServiceClient interface {
	ProcessDeepNested(context.Context, *connect_go.Request[v1.DeepNestedRequest]) (*connect_go.Response[v1.Response], error)
	ProcessVeryDeep(context.Context, *connect_go.Request[v1.VeryDeepResource]) (*connect_go.Response[v1.Response], error)
}

// NewDeepNestingServiceClient constructs a client for the test.v1.DeepNestingService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeepNestingServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DeepNestingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &deepNestingServiceClient{
		processDeepNested: connect_go.NewClient[v1.DeepNestedRequest, v1.Response](
			httpClient,
			baseURL+DeepNestingServiceProcessDeepNestedProcedure,
			opts...,
		),
		processVeryDeep: connect_go.NewClient[v1.VeryDeepResource, v1.Response](
			httpClient,
			baseURL+DeepNestingServiceProcessVeryDeepProcedure,
			opts...,
		),
	}
}

// deepNestingServiceClient implements DeepNestingServiceClient.
type deepNestingServiceClient struct {
	processDeepNested *connect_go.Client[v1.DeepNestedRequest, v1.Response]
	processVeryDeep   *connect_go.Client[v1.VeryDeepResource, v1.Response]
}

// ProcessDeepNested calls test.v1.DeepNestingService.ProcessDeepNested.
func (c *deepNestingServiceClient) ProcessDeepNested(ctx context.Context, req *connect_go.Request[v1.DeepNestedRequest]) (*connect_go.Response[v1.Response], error) {
	return c.processDeepNested.CallUnary(ctx, req)
}

// ProcessVeryDeep calls test.v1.DeepNestingService.ProcessVeryDeep.
func (c *deepNestingServiceClient) ProcessVeryDeep(ctx context.Context, req *connect_go.Request[v1.VeryDeepResource]) (*connect_go.Response[v1.Response], error) {
	return c.processVeryDeep.CallUnary(ctx, req)
}

// DeepNestingServiceHandler is an implementation of the test.v1.DeepNestingService service.
type DeepNestingServiceHandler interface {
	ProcessDeepNested(context.Context, *connect_go.Request[v1.DeepNestedRequest]) (*connect_go.Response[v1.Response], error)
	ProcessVeryDeep(context.Context, *connect_go.Request[v1.VeryDeepResource]) (*connect_go.Response[v1.Response], error)
}

// NewDeepNestingServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeepNestingServiceHandler(svc DeepNestingServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	deepNestingServiceProcessDeepNestedHandler := connect_go.NewUnaryHandler(
		DeepNestingServiceProcessDeepNestedProcedure,
		svc.ProcessDeepNested,
		opts...,
	)
	deepNestingServiceProcessVeryDeepHandler := connect_go.NewUnaryHandler(
		DeepNestingServiceProcessVeryDeepProcedure,
		svc.ProcessVeryDeep,
		opts...,
	)
	return "/test.v1.DeepNestingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeepNestingServiceProcessDeepNestedProcedure:
			deepNestingServiceProcessDeepNestedHandler.ServeHTTP(w, r)
		case DeepNestingServiceProcessVeryDeepProcedure:
			deepNestingServiceProcessVeryDeepHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeepNestingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeepNestingServiceHandler struct{}

func (UnimplementedDeepNestingServiceHandler) ProcessDeepNested(context.Context, *connect_go.Request[v1.DeepNestedRequest]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.DeepNestingService.ProcessDeepNested is not implemented"))
}

func (UnimplementedDeepNestingServiceHandler) ProcessVeryDeep(context.Context, *connect_go.Request[v1.VeryDeepResource]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.DeepNestingService.ProcessVeryDeep is not implemented"))
}
