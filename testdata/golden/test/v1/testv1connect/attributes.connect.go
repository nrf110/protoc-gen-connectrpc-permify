// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: test/v1/attributes.proto

package testv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "test/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AttributesName is the fully-qualified name of the Attributes service.
	AttributesName = "test.v1.Attributes"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AttributesWithAttributesProcedure is the fully-qualified name of the Attributes's WithAttributes
	// RPC.
	AttributesWithAttributesProcedure = "/test.v1.Attributes/WithAttributes"
)

// AttributesClient is a client for the test.v1.Attributes service.
type AttributesClient interface {
	WithAttributes(context.Context, *connect.Request[v1.AttributesRequest]) (*connect.Response[v1.Response], error)
}

// NewAttributesClient constructs a client for the test.v1.Attributes service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAttributesClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AttributesClient {
	baseURL = strings.TrimRight(baseURL, "/")
	attributesMethods := v1.File_test_v1_attributes_proto.Services().ByName("Attributes").Methods()
	return &attributesClient{
		withAttributes: connect.NewClient[v1.AttributesRequest, v1.Response](
			httpClient,
			baseURL+AttributesWithAttributesProcedure,
			connect.WithSchema(attributesMethods.ByName("WithAttributes")),
			connect.WithClientOptions(opts...),
		),
	}
}

// attributesClient implements AttributesClient.
type attributesClient struct {
	withAttributes *connect.Client[v1.AttributesRequest, v1.Response]
}

// WithAttributes calls test.v1.Attributes.WithAttributes.
func (c *attributesClient) WithAttributes(ctx context.Context, req *connect.Request[v1.AttributesRequest]) (*connect.Response[v1.Response], error) {
	return c.withAttributes.CallUnary(ctx, req)
}

// AttributesHandler is an implementation of the test.v1.Attributes service.
type AttributesHandler interface {
	WithAttributes(context.Context, *connect.Request[v1.AttributesRequest]) (*connect.Response[v1.Response], error)
}

// NewAttributesHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAttributesHandler(svc AttributesHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	attributesMethods := v1.File_test_v1_attributes_proto.Services().ByName("Attributes").Methods()
	attributesWithAttributesHandler := connect.NewUnaryHandler(
		AttributesWithAttributesProcedure,
		svc.WithAttributes,
		connect.WithSchema(attributesMethods.ByName("WithAttributes")),
		connect.WithHandlerOptions(opts...),
	)
	return "/test.v1.Attributes/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AttributesWithAttributesProcedure:
			attributesWithAttributesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAttributesHandler returns CodeUnimplemented from all methods.
type UnimplementedAttributesHandler struct{}

func (UnimplementedAttributesHandler) WithAttributes(context.Context, *connect.Request[v1.AttributesRequest]) (*connect.Response[v1.Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("test.v1.Attributes.WithAttributes is not implemented"))
}
