// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: test/v1/complex_attributes.proto

package testv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "test/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AttributeServiceName is the fully-qualified name of the AttributeService service.
	AttributeServiceName = "test.v1.AttributeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AttributeServiceProcessDocumentProcedure is the fully-qualified name of the AttributeService's
	// ProcessDocument RPC.
	AttributeServiceProcessDocumentProcedure = "/test.v1.AttributeService/ProcessDocument"
)

// AttributeServiceClient is a client for the test.v1.AttributeService service.
type AttributeServiceClient interface {
	ProcessDocument(context.Context, *connect.Request[v1.ComplexResource]) (*connect.Response[v1.Response], error)
}

// NewAttributeServiceClient constructs a client for the test.v1.AttributeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAttributeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AttributeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	attributeServiceMethods := v1.File_test_v1_complex_attributes_proto.Services().ByName("AttributeService").Methods()
	return &attributeServiceClient{
		processDocument: connect.NewClient[v1.ComplexResource, v1.Response](
			httpClient,
			baseURL+AttributeServiceProcessDocumentProcedure,
			connect.WithSchema(attributeServiceMethods.ByName("ProcessDocument")),
			connect.WithClientOptions(opts...),
		),
	}
}

// attributeServiceClient implements AttributeServiceClient.
type attributeServiceClient struct {
	processDocument *connect.Client[v1.ComplexResource, v1.Response]
}

// ProcessDocument calls test.v1.AttributeService.ProcessDocument.
func (c *attributeServiceClient) ProcessDocument(ctx context.Context, req *connect.Request[v1.ComplexResource]) (*connect.Response[v1.Response], error) {
	return c.processDocument.CallUnary(ctx, req)
}

// AttributeServiceHandler is an implementation of the test.v1.AttributeService service.
type AttributeServiceHandler interface {
	ProcessDocument(context.Context, *connect.Request[v1.ComplexResource]) (*connect.Response[v1.Response], error)
}

// NewAttributeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAttributeServiceHandler(svc AttributeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	attributeServiceMethods := v1.File_test_v1_complex_attributes_proto.Services().ByName("AttributeService").Methods()
	attributeServiceProcessDocumentHandler := connect.NewUnaryHandler(
		AttributeServiceProcessDocumentProcedure,
		svc.ProcessDocument,
		connect.WithSchema(attributeServiceMethods.ByName("ProcessDocument")),
		connect.WithHandlerOptions(opts...),
	)
	return "/test.v1.AttributeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AttributeServiceProcessDocumentProcedure:
			attributeServiceProcessDocumentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAttributeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAttributeServiceHandler struct{}

func (UnimplementedAttributeServiceHandler) ProcessDocument(context.Context, *connect.Request[v1.ComplexResource]) (*connect.Response[v1.Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("test.v1.AttributeService.ProcessDocument is not implemented"))
}
