// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: test/v1/error_cases.proto

package testv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
	v1 "test/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ErrorCaseServiceName is the fully-qualified name of the ErrorCaseService service.
	ErrorCaseServiceName = "test.v1.ErrorCaseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ErrorCaseServiceBadResourceProcedure is the fully-qualified name of the ErrorCaseService's
	// BadResource RPC.
	ErrorCaseServiceBadResourceProcedure = "/test.v1.ErrorCaseService/BadResource"
	// ErrorCaseServiceValidCaseProcedure is the fully-qualified name of the ErrorCaseService's
	// ValidCase RPC.
	ErrorCaseServiceValidCaseProcedure = "/test.v1.ErrorCaseService/ValidCase"
	// ErrorCaseServiceMultipleIdsProcedure is the fully-qualified name of the ErrorCaseService's
	// MultipleIds RPC.
	ErrorCaseServiceMultipleIdsProcedure = "/test.v1.ErrorCaseService/MultipleIds"
	// ErrorCaseServiceMultipleTenantsProcedure is the fully-qualified name of the ErrorCaseService's
	// MultipleTenants RPC.
	ErrorCaseServiceMultipleTenantsProcedure = "/test.v1.ErrorCaseService/MultipleTenants"
)

// ErrorCaseServiceClient is a client for the test.v1.ErrorCaseService service.
type ErrorCaseServiceClient interface {
	// This should error - resource without resource_id
	BadResource(context.Context, *connect_go.Request[v1.NoResourceId]) (*connect_go.Response[v1.Response], error)
	// This should work - valid case
	ValidCase(context.Context, *connect_go.Request[v1.ValidResource]) (*connect_go.Response[v1.Response], error)
	// Edge case - multiple resource IDs
	MultipleIds(context.Context, *connect_go.Request[v1.MultipleResourceIds]) (*connect_go.Response[v1.Response], error)
	// Edge case - multiple tenant IDs
	MultipleTenants(context.Context, *connect_go.Request[v1.MultipleTenantIds]) (*connect_go.Response[v1.Response], error)
}

// NewErrorCaseServiceClient constructs a client for the test.v1.ErrorCaseService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewErrorCaseServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ErrorCaseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &errorCaseServiceClient{
		badResource: connect_go.NewClient[v1.NoResourceId, v1.Response](
			httpClient,
			baseURL+ErrorCaseServiceBadResourceProcedure,
			opts...,
		),
		validCase: connect_go.NewClient[v1.ValidResource, v1.Response](
			httpClient,
			baseURL+ErrorCaseServiceValidCaseProcedure,
			opts...,
		),
		multipleIds: connect_go.NewClient[v1.MultipleResourceIds, v1.Response](
			httpClient,
			baseURL+ErrorCaseServiceMultipleIdsProcedure,
			opts...,
		),
		multipleTenants: connect_go.NewClient[v1.MultipleTenantIds, v1.Response](
			httpClient,
			baseURL+ErrorCaseServiceMultipleTenantsProcedure,
			opts...,
		),
	}
}

// errorCaseServiceClient implements ErrorCaseServiceClient.
type errorCaseServiceClient struct {
	badResource     *connect_go.Client[v1.NoResourceId, v1.Response]
	validCase       *connect_go.Client[v1.ValidResource, v1.Response]
	multipleIds     *connect_go.Client[v1.MultipleResourceIds, v1.Response]
	multipleTenants *connect_go.Client[v1.MultipleTenantIds, v1.Response]
}

// BadResource calls test.v1.ErrorCaseService.BadResource.
func (c *errorCaseServiceClient) BadResource(ctx context.Context, req *connect_go.Request[v1.NoResourceId]) (*connect_go.Response[v1.Response], error) {
	return c.badResource.CallUnary(ctx, req)
}

// ValidCase calls test.v1.ErrorCaseService.ValidCase.
func (c *errorCaseServiceClient) ValidCase(ctx context.Context, req *connect_go.Request[v1.ValidResource]) (*connect_go.Response[v1.Response], error) {
	return c.validCase.CallUnary(ctx, req)
}

// MultipleIds calls test.v1.ErrorCaseService.MultipleIds.
func (c *errorCaseServiceClient) MultipleIds(ctx context.Context, req *connect_go.Request[v1.MultipleResourceIds]) (*connect_go.Response[v1.Response], error) {
	return c.multipleIds.CallUnary(ctx, req)
}

// MultipleTenants calls test.v1.ErrorCaseService.MultipleTenants.
func (c *errorCaseServiceClient) MultipleTenants(ctx context.Context, req *connect_go.Request[v1.MultipleTenantIds]) (*connect_go.Response[v1.Response], error) {
	return c.multipleTenants.CallUnary(ctx, req)
}

// ErrorCaseServiceHandler is an implementation of the test.v1.ErrorCaseService service.
type ErrorCaseServiceHandler interface {
	// This should error - resource without resource_id
	BadResource(context.Context, *connect_go.Request[v1.NoResourceId]) (*connect_go.Response[v1.Response], error)
	// This should work - valid case
	ValidCase(context.Context, *connect_go.Request[v1.ValidResource]) (*connect_go.Response[v1.Response], error)
	// Edge case - multiple resource IDs
	MultipleIds(context.Context, *connect_go.Request[v1.MultipleResourceIds]) (*connect_go.Response[v1.Response], error)
	// Edge case - multiple tenant IDs
	MultipleTenants(context.Context, *connect_go.Request[v1.MultipleTenantIds]) (*connect_go.Response[v1.Response], error)
}

// NewErrorCaseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewErrorCaseServiceHandler(svc ErrorCaseServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	errorCaseServiceBadResourceHandler := connect_go.NewUnaryHandler(
		ErrorCaseServiceBadResourceProcedure,
		svc.BadResource,
		opts...,
	)
	errorCaseServiceValidCaseHandler := connect_go.NewUnaryHandler(
		ErrorCaseServiceValidCaseProcedure,
		svc.ValidCase,
		opts...,
	)
	errorCaseServiceMultipleIdsHandler := connect_go.NewUnaryHandler(
		ErrorCaseServiceMultipleIdsProcedure,
		svc.MultipleIds,
		opts...,
	)
	errorCaseServiceMultipleTenantsHandler := connect_go.NewUnaryHandler(
		ErrorCaseServiceMultipleTenantsProcedure,
		svc.MultipleTenants,
		opts...,
	)
	return "/test.v1.ErrorCaseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ErrorCaseServiceBadResourceProcedure:
			errorCaseServiceBadResourceHandler.ServeHTTP(w, r)
		case ErrorCaseServiceValidCaseProcedure:
			errorCaseServiceValidCaseHandler.ServeHTTP(w, r)
		case ErrorCaseServiceMultipleIdsProcedure:
			errorCaseServiceMultipleIdsHandler.ServeHTTP(w, r)
		case ErrorCaseServiceMultipleTenantsProcedure:
			errorCaseServiceMultipleTenantsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedErrorCaseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedErrorCaseServiceHandler struct{}

func (UnimplementedErrorCaseServiceHandler) BadResource(context.Context, *connect_go.Request[v1.NoResourceId]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.ErrorCaseService.BadResource is not implemented"))
}

func (UnimplementedErrorCaseServiceHandler) ValidCase(context.Context, *connect_go.Request[v1.ValidResource]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.ErrorCaseService.ValidCase is not implemented"))
}

func (UnimplementedErrorCaseServiceHandler) MultipleIds(context.Context, *connect_go.Request[v1.MultipleResourceIds]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.ErrorCaseService.MultipleIds is not implemented"))
}

func (UnimplementedErrorCaseServiceHandler) MultipleTenants(context.Context, *connect_go.Request[v1.MultipleTenantIds]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.ErrorCaseService.MultipleTenants is not implemented"))
}
