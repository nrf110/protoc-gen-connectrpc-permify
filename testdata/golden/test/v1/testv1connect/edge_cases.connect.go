// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: test/v1/edge_cases.proto

package testv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
	v1 "test/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EmptyServiceName is the fully-qualified name of the EmptyService service.
	EmptyServiceName = "test.v1.EmptyService"
	// AllPublicServiceName is the fully-qualified name of the AllPublicService service.
	AllPublicServiceName = "test.v1.AllPublicService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AllPublicServicePublicMethod1Procedure is the fully-qualified name of the AllPublicService's
	// PublicMethod1 RPC.
	AllPublicServicePublicMethod1Procedure = "/test.v1.AllPublicService/PublicMethod1"
	// AllPublicServicePublicMethod2Procedure is the fully-qualified name of the AllPublicService's
	// PublicMethod2 RPC.
	AllPublicServicePublicMethod2Procedure = "/test.v1.AllPublicService/PublicMethod2"
)

// EmptyServiceClient is a client for the test.v1.EmptyService service.
type EmptyServiceClient interface {
}

// NewEmptyServiceClient constructs a client for the test.v1.EmptyService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEmptyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EmptyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &emptyServiceClient{}
}

// emptyServiceClient implements EmptyServiceClient.
type emptyServiceClient struct {
}

// EmptyServiceHandler is an implementation of the test.v1.EmptyService service.
type EmptyServiceHandler interface {
}

// NewEmptyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEmptyServiceHandler(svc EmptyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	return "/test.v1.EmptyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEmptyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEmptyServiceHandler struct{}

// AllPublicServiceClient is a client for the test.v1.AllPublicService service.
type AllPublicServiceClient interface {
	PublicMethod1(context.Context, *connect_go.Request[v1.EmptyRequest]) (*connect_go.Response[v1.Response], error)
	PublicMethod2(context.Context, *connect_go.Request[v1.MinimalResource]) (*connect_go.Response[v1.Response], error)
}

// NewAllPublicServiceClient constructs a client for the test.v1.AllPublicService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAllPublicServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AllPublicServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &allPublicServiceClient{
		publicMethod1: connect_go.NewClient[v1.EmptyRequest, v1.Response](
			httpClient,
			baseURL+AllPublicServicePublicMethod1Procedure,
			opts...,
		),
		publicMethod2: connect_go.NewClient[v1.MinimalResource, v1.Response](
			httpClient,
			baseURL+AllPublicServicePublicMethod2Procedure,
			opts...,
		),
	}
}

// allPublicServiceClient implements AllPublicServiceClient.
type allPublicServiceClient struct {
	publicMethod1 *connect_go.Client[v1.EmptyRequest, v1.Response]
	publicMethod2 *connect_go.Client[v1.MinimalResource, v1.Response]
}

// PublicMethod1 calls test.v1.AllPublicService.PublicMethod1.
func (c *allPublicServiceClient) PublicMethod1(ctx context.Context, req *connect_go.Request[v1.EmptyRequest]) (*connect_go.Response[v1.Response], error) {
	return c.publicMethod1.CallUnary(ctx, req)
}

// PublicMethod2 calls test.v1.AllPublicService.PublicMethod2.
func (c *allPublicServiceClient) PublicMethod2(ctx context.Context, req *connect_go.Request[v1.MinimalResource]) (*connect_go.Response[v1.Response], error) {
	return c.publicMethod2.CallUnary(ctx, req)
}

// AllPublicServiceHandler is an implementation of the test.v1.AllPublicService service.
type AllPublicServiceHandler interface {
	PublicMethod1(context.Context, *connect_go.Request[v1.EmptyRequest]) (*connect_go.Response[v1.Response], error)
	PublicMethod2(context.Context, *connect_go.Request[v1.MinimalResource]) (*connect_go.Response[v1.Response], error)
}

// NewAllPublicServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAllPublicServiceHandler(svc AllPublicServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	allPublicServicePublicMethod1Handler := connect_go.NewUnaryHandler(
		AllPublicServicePublicMethod1Procedure,
		svc.PublicMethod1,
		opts...,
	)
	allPublicServicePublicMethod2Handler := connect_go.NewUnaryHandler(
		AllPublicServicePublicMethod2Procedure,
		svc.PublicMethod2,
		opts...,
	)
	return "/test.v1.AllPublicService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AllPublicServicePublicMethod1Procedure:
			allPublicServicePublicMethod1Handler.ServeHTTP(w, r)
		case AllPublicServicePublicMethod2Procedure:
			allPublicServicePublicMethod2Handler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAllPublicServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAllPublicServiceHandler struct{}

func (UnimplementedAllPublicServiceHandler) PublicMethod1(context.Context, *connect_go.Request[v1.EmptyRequest]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.AllPublicService.PublicMethod1 is not implemented"))
}

func (UnimplementedAllPublicServiceHandler) PublicMethod2(context.Context, *connect_go.Request[v1.MinimalResource]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.AllPublicService.PublicMethod2 is not implemented"))
}
