// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: test/v1/multi_service.proto

package testv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
	v1 "test/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AccountServiceName is the fully-qualified name of the AccountService service.
	AccountServiceName = "test.v1.AccountService"
	// ProfileServiceName is the fully-qualified name of the ProfileService service.
	ProfileServiceName = "test.v1.ProfileService"
	// SettingsServiceName is the fully-qualified name of the SettingsService service.
	SettingsServiceName = "test.v1.SettingsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountServiceGetAccountProcedure is the fully-qualified name of the AccountService's GetAccount
	// RPC.
	AccountServiceGetAccountProcedure = "/test.v1.AccountService/GetAccount"
	// AccountServiceGetPublicAccountInfoProcedure is the fully-qualified name of the AccountService's
	// GetPublicAccountInfo RPC.
	AccountServiceGetPublicAccountInfoProcedure = "/test.v1.AccountService/GetPublicAccountInfo"
	// ProfileServiceGetProfileProcedure is the fully-qualified name of the ProfileService's GetProfile
	// RPC.
	ProfileServiceGetProfileProcedure = "/test.v1.ProfileService/GetProfile"
	// SettingsServiceGetSettingsProcedure is the fully-qualified name of the SettingsService's
	// GetSettings RPC.
	SettingsServiceGetSettingsProcedure = "/test.v1.SettingsService/GetSettings"
)

// AccountServiceClient is a client for the test.v1.AccountService service.
type AccountServiceClient interface {
	GetAccount(context.Context, *connect_go.Request[v1.Account]) (*connect_go.Response[v1.Response], error)
	GetPublicAccountInfo(context.Context, *connect_go.Request[v1.PublicInfo]) (*connect_go.Response[v1.Response], error)
}

// NewAccountServiceClient constructs a client for the test.v1.AccountService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountServiceClient{
		getAccount: connect_go.NewClient[v1.Account, v1.Response](
			httpClient,
			baseURL+AccountServiceGetAccountProcedure,
			opts...,
		),
		getPublicAccountInfo: connect_go.NewClient[v1.PublicInfo, v1.Response](
			httpClient,
			baseURL+AccountServiceGetPublicAccountInfoProcedure,
			opts...,
		),
	}
}

// accountServiceClient implements AccountServiceClient.
type accountServiceClient struct {
	getAccount           *connect_go.Client[v1.Account, v1.Response]
	getPublicAccountInfo *connect_go.Client[v1.PublicInfo, v1.Response]
}

// GetAccount calls test.v1.AccountService.GetAccount.
func (c *accountServiceClient) GetAccount(ctx context.Context, req *connect_go.Request[v1.Account]) (*connect_go.Response[v1.Response], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// GetPublicAccountInfo calls test.v1.AccountService.GetPublicAccountInfo.
func (c *accountServiceClient) GetPublicAccountInfo(ctx context.Context, req *connect_go.Request[v1.PublicInfo]) (*connect_go.Response[v1.Response], error) {
	return c.getPublicAccountInfo.CallUnary(ctx, req)
}

// AccountServiceHandler is an implementation of the test.v1.AccountService service.
type AccountServiceHandler interface {
	GetAccount(context.Context, *connect_go.Request[v1.Account]) (*connect_go.Response[v1.Response], error)
	GetPublicAccountInfo(context.Context, *connect_go.Request[v1.PublicInfo]) (*connect_go.Response[v1.Response], error)
}

// NewAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountServiceHandler(svc AccountServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	accountServiceGetAccountHandler := connect_go.NewUnaryHandler(
		AccountServiceGetAccountProcedure,
		svc.GetAccount,
		opts...,
	)
	accountServiceGetPublicAccountInfoHandler := connect_go.NewUnaryHandler(
		AccountServiceGetPublicAccountInfoProcedure,
		svc.GetPublicAccountInfo,
		opts...,
	)
	return "/test.v1.AccountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountServiceGetAccountProcedure:
			accountServiceGetAccountHandler.ServeHTTP(w, r)
		case AccountServiceGetPublicAccountInfoProcedure:
			accountServiceGetPublicAccountInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountServiceHandler struct{}

func (UnimplementedAccountServiceHandler) GetAccount(context.Context, *connect_go.Request[v1.Account]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.AccountService.GetAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetPublicAccountInfo(context.Context, *connect_go.Request[v1.PublicInfo]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.AccountService.GetPublicAccountInfo is not implemented"))
}

// ProfileServiceClient is a client for the test.v1.ProfileService service.
type ProfileServiceClient interface {
	GetProfile(context.Context, *connect_go.Request[v1.Profile]) (*connect_go.Response[v1.Response], error)
}

// NewProfileServiceClient constructs a client for the test.v1.ProfileService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProfileServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProfileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &profileServiceClient{
		getProfile: connect_go.NewClient[v1.Profile, v1.Response](
			httpClient,
			baseURL+ProfileServiceGetProfileProcedure,
			opts...,
		),
	}
}

// profileServiceClient implements ProfileServiceClient.
type profileServiceClient struct {
	getProfile *connect_go.Client[v1.Profile, v1.Response]
}

// GetProfile calls test.v1.ProfileService.GetProfile.
func (c *profileServiceClient) GetProfile(ctx context.Context, req *connect_go.Request[v1.Profile]) (*connect_go.Response[v1.Response], error) {
	return c.getProfile.CallUnary(ctx, req)
}

// ProfileServiceHandler is an implementation of the test.v1.ProfileService service.
type ProfileServiceHandler interface {
	GetProfile(context.Context, *connect_go.Request[v1.Profile]) (*connect_go.Response[v1.Response], error)
}

// NewProfileServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProfileServiceHandler(svc ProfileServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	profileServiceGetProfileHandler := connect_go.NewUnaryHandler(
		ProfileServiceGetProfileProcedure,
		svc.GetProfile,
		opts...,
	)
	return "/test.v1.ProfileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProfileServiceGetProfileProcedure:
			profileServiceGetProfileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProfileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProfileServiceHandler struct{}

func (UnimplementedProfileServiceHandler) GetProfile(context.Context, *connect_go.Request[v1.Profile]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.ProfileService.GetProfile is not implemented"))
}

// SettingsServiceClient is a client for the test.v1.SettingsService service.
type SettingsServiceClient interface {
	GetSettings(context.Context, *connect_go.Request[v1.Settings]) (*connect_go.Response[v1.Response], error)
}

// NewSettingsServiceClient constructs a client for the test.v1.SettingsService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSettingsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SettingsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &settingsServiceClient{
		getSettings: connect_go.NewClient[v1.Settings, v1.Response](
			httpClient,
			baseURL+SettingsServiceGetSettingsProcedure,
			opts...,
		),
	}
}

// settingsServiceClient implements SettingsServiceClient.
type settingsServiceClient struct {
	getSettings *connect_go.Client[v1.Settings, v1.Response]
}

// GetSettings calls test.v1.SettingsService.GetSettings.
func (c *settingsServiceClient) GetSettings(ctx context.Context, req *connect_go.Request[v1.Settings]) (*connect_go.Response[v1.Response], error) {
	return c.getSettings.CallUnary(ctx, req)
}

// SettingsServiceHandler is an implementation of the test.v1.SettingsService service.
type SettingsServiceHandler interface {
	GetSettings(context.Context, *connect_go.Request[v1.Settings]) (*connect_go.Response[v1.Response], error)
}

// NewSettingsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSettingsServiceHandler(svc SettingsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	settingsServiceGetSettingsHandler := connect_go.NewUnaryHandler(
		SettingsServiceGetSettingsProcedure,
		svc.GetSettings,
		opts...,
	)
	return "/test.v1.SettingsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SettingsServiceGetSettingsProcedure:
			settingsServiceGetSettingsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSettingsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSettingsServiceHandler struct{}

func (UnimplementedSettingsServiceHandler) GetSettings(context.Context, *connect_go.Request[v1.Settings]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.SettingsService.GetSettings is not implemented"))
}
