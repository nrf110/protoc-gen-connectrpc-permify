// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: test/v1/mixed_service.proto

package testv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
	v1 "test/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MixedServiceName is the fully-qualified name of the MixedService service.
	MixedServiceName = "test.v1.MixedService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MixedServiceGetPublicInfoProcedure is the fully-qualified name of the MixedService's
	// GetPublicInfo RPC.
	MixedServiceGetPublicInfoProcedure = "/test.v1.MixedService/GetPublicInfo"
	// MixedServiceGetUserProcedure is the fully-qualified name of the MixedService's GetUser RPC.
	MixedServiceGetUserProcedure = "/test.v1.MixedService/GetUser"
	// MixedServiceUpdateUserProcedure is the fully-qualified name of the MixedService's UpdateUser RPC.
	MixedServiceUpdateUserProcedure = "/test.v1.MixedService/UpdateUser"
	// MixedServiceDeleteUserProcedure is the fully-qualified name of the MixedService's DeleteUser RPC.
	MixedServiceDeleteUserProcedure = "/test.v1.MixedService/DeleteUser"
)

// MixedServiceClient is a client for the test.v1.MixedService service.
type MixedServiceClient interface {
	// Public endpoint - no auth needed
	GetPublicInfo(context.Context, *connect_go.Request[v1.SimpleRequest]) (*connect_go.Response[v1.Response], error)
	// Protected endpoint - requires permission
	GetUser(context.Context, *connect_go.Request[v1.GetUserResource]) (*connect_go.Response[v1.Response], error)
	// Another protected endpoint with different permission
	UpdateUser(context.Context, *connect_go.Request[v1.UpdateUserResource]) (*connect_go.Response[v1.Response], error)
	// Admin only endpoint
	DeleteUser(context.Context, *connect_go.Request[v1.DeleteUserResource]) (*connect_go.Response[v1.Response], error)
}

// NewMixedServiceClient constructs a client for the test.v1.MixedService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMixedServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MixedServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mixedServiceClient{
		getPublicInfo: connect_go.NewClient[v1.SimpleRequest, v1.Response](
			httpClient,
			baseURL+MixedServiceGetPublicInfoProcedure,
			opts...,
		),
		getUser: connect_go.NewClient[v1.GetUserResource, v1.Response](
			httpClient,
			baseURL+MixedServiceGetUserProcedure,
			opts...,
		),
		updateUser: connect_go.NewClient[v1.UpdateUserResource, v1.Response](
			httpClient,
			baseURL+MixedServiceUpdateUserProcedure,
			opts...,
		),
		deleteUser: connect_go.NewClient[v1.DeleteUserResource, v1.Response](
			httpClient,
			baseURL+MixedServiceDeleteUserProcedure,
			opts...,
		),
	}
}

// mixedServiceClient implements MixedServiceClient.
type mixedServiceClient struct {
	getPublicInfo *connect_go.Client[v1.SimpleRequest, v1.Response]
	getUser       *connect_go.Client[v1.GetUserResource, v1.Response]
	updateUser    *connect_go.Client[v1.UpdateUserResource, v1.Response]
	deleteUser    *connect_go.Client[v1.DeleteUserResource, v1.Response]
}

// GetPublicInfo calls test.v1.MixedService.GetPublicInfo.
func (c *mixedServiceClient) GetPublicInfo(ctx context.Context, req *connect_go.Request[v1.SimpleRequest]) (*connect_go.Response[v1.Response], error) {
	return c.getPublicInfo.CallUnary(ctx, req)
}

// GetUser calls test.v1.MixedService.GetUser.
func (c *mixedServiceClient) GetUser(ctx context.Context, req *connect_go.Request[v1.GetUserResource]) (*connect_go.Response[v1.Response], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdateUser calls test.v1.MixedService.UpdateUser.
func (c *mixedServiceClient) UpdateUser(ctx context.Context, req *connect_go.Request[v1.UpdateUserResource]) (*connect_go.Response[v1.Response], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls test.v1.MixedService.DeleteUser.
func (c *mixedServiceClient) DeleteUser(ctx context.Context, req *connect_go.Request[v1.DeleteUserResource]) (*connect_go.Response[v1.Response], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// MixedServiceHandler is an implementation of the test.v1.MixedService service.
type MixedServiceHandler interface {
	// Public endpoint - no auth needed
	GetPublicInfo(context.Context, *connect_go.Request[v1.SimpleRequest]) (*connect_go.Response[v1.Response], error)
	// Protected endpoint - requires permission
	GetUser(context.Context, *connect_go.Request[v1.GetUserResource]) (*connect_go.Response[v1.Response], error)
	// Another protected endpoint with different permission
	UpdateUser(context.Context, *connect_go.Request[v1.UpdateUserResource]) (*connect_go.Response[v1.Response], error)
	// Admin only endpoint
	DeleteUser(context.Context, *connect_go.Request[v1.DeleteUserResource]) (*connect_go.Response[v1.Response], error)
}

// NewMixedServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMixedServiceHandler(svc MixedServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mixedServiceGetPublicInfoHandler := connect_go.NewUnaryHandler(
		MixedServiceGetPublicInfoProcedure,
		svc.GetPublicInfo,
		opts...,
	)
	mixedServiceGetUserHandler := connect_go.NewUnaryHandler(
		MixedServiceGetUserProcedure,
		svc.GetUser,
		opts...,
	)
	mixedServiceUpdateUserHandler := connect_go.NewUnaryHandler(
		MixedServiceUpdateUserProcedure,
		svc.UpdateUser,
		opts...,
	)
	mixedServiceDeleteUserHandler := connect_go.NewUnaryHandler(
		MixedServiceDeleteUserProcedure,
		svc.DeleteUser,
		opts...,
	)
	return "/test.v1.MixedService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MixedServiceGetPublicInfoProcedure:
			mixedServiceGetPublicInfoHandler.ServeHTTP(w, r)
		case MixedServiceGetUserProcedure:
			mixedServiceGetUserHandler.ServeHTTP(w, r)
		case MixedServiceUpdateUserProcedure:
			mixedServiceUpdateUserHandler.ServeHTTP(w, r)
		case MixedServiceDeleteUserProcedure:
			mixedServiceDeleteUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMixedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMixedServiceHandler struct{}

func (UnimplementedMixedServiceHandler) GetPublicInfo(context.Context, *connect_go.Request[v1.SimpleRequest]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.MixedService.GetPublicInfo is not implemented"))
}

func (UnimplementedMixedServiceHandler) GetUser(context.Context, *connect_go.Request[v1.GetUserResource]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.MixedService.GetUser is not implemented"))
}

func (UnimplementedMixedServiceHandler) UpdateUser(context.Context, *connect_go.Request[v1.UpdateUserResource]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.MixedService.UpdateUser is not implemented"))
}

func (UnimplementedMixedServiceHandler) DeleteUser(context.Context, *connect_go.Request[v1.DeleteUserResource]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("test.v1.MixedService.DeleteUser is not implemented"))
}
