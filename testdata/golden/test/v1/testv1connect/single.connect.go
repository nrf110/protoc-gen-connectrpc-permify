// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: test/v1/single.proto

package testv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "test/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SingleName is the fully-qualified name of the Single service.
	SingleName = "test.v1.Single"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SingleFlatProcedure is the fully-qualified name of the Single's Flat RPC.
	SingleFlatProcedure = "/test.v1.Single/Flat"
	// SingleFlatWithIdProcedure is the fully-qualified name of the Single's FlatWithId RPC.
	SingleFlatWithIdProcedure = "/test.v1.Single/FlatWithId"
	// SingleNestedProcedure is the fully-qualified name of the Single's Nested RPC.
	SingleNestedProcedure = "/test.v1.Single/Nested"
)

// SingleClient is a client for the test.v1.Single service.
type SingleClient interface {
	Flat(context.Context, *connect.Request[v1.ResourceRequest]) (*connect.Response[v1.Response], error)
	FlatWithId(context.Context, *connect.Request[v1.ResourceWithIdRequest]) (*connect.Response[v1.Response], error)
	Nested(context.Context, *connect.Request[v1.NestedResourceRequest]) (*connect.Response[v1.Response], error)
}

// NewSingleClient constructs a client for the test.v1.Single service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSingleClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SingleClient {
	baseURL = strings.TrimRight(baseURL, "/")
	singleMethods := v1.File_test_v1_single_proto.Services().ByName("Single").Methods()
	return &singleClient{
		flat: connect.NewClient[v1.ResourceRequest, v1.Response](
			httpClient,
			baseURL+SingleFlatProcedure,
			connect.WithSchema(singleMethods.ByName("Flat")),
			connect.WithClientOptions(opts...),
		),
		flatWithId: connect.NewClient[v1.ResourceWithIdRequest, v1.Response](
			httpClient,
			baseURL+SingleFlatWithIdProcedure,
			connect.WithSchema(singleMethods.ByName("FlatWithId")),
			connect.WithClientOptions(opts...),
		),
		nested: connect.NewClient[v1.NestedResourceRequest, v1.Response](
			httpClient,
			baseURL+SingleNestedProcedure,
			connect.WithSchema(singleMethods.ByName("Nested")),
			connect.WithClientOptions(opts...),
		),
	}
}

// singleClient implements SingleClient.
type singleClient struct {
	flat       *connect.Client[v1.ResourceRequest, v1.Response]
	flatWithId *connect.Client[v1.ResourceWithIdRequest, v1.Response]
	nested     *connect.Client[v1.NestedResourceRequest, v1.Response]
}

// Flat calls test.v1.Single.Flat.
func (c *singleClient) Flat(ctx context.Context, req *connect.Request[v1.ResourceRequest]) (*connect.Response[v1.Response], error) {
	return c.flat.CallUnary(ctx, req)
}

// FlatWithId calls test.v1.Single.FlatWithId.
func (c *singleClient) FlatWithId(ctx context.Context, req *connect.Request[v1.ResourceWithIdRequest]) (*connect.Response[v1.Response], error) {
	return c.flatWithId.CallUnary(ctx, req)
}

// Nested calls test.v1.Single.Nested.
func (c *singleClient) Nested(ctx context.Context, req *connect.Request[v1.NestedResourceRequest]) (*connect.Response[v1.Response], error) {
	return c.nested.CallUnary(ctx, req)
}

// SingleHandler is an implementation of the test.v1.Single service.
type SingleHandler interface {
	Flat(context.Context, *connect.Request[v1.ResourceRequest]) (*connect.Response[v1.Response], error)
	FlatWithId(context.Context, *connect.Request[v1.ResourceWithIdRequest]) (*connect.Response[v1.Response], error)
	Nested(context.Context, *connect.Request[v1.NestedResourceRequest]) (*connect.Response[v1.Response], error)
}

// NewSingleHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSingleHandler(svc SingleHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	singleMethods := v1.File_test_v1_single_proto.Services().ByName("Single").Methods()
	singleFlatHandler := connect.NewUnaryHandler(
		SingleFlatProcedure,
		svc.Flat,
		connect.WithSchema(singleMethods.ByName("Flat")),
		connect.WithHandlerOptions(opts...),
	)
	singleFlatWithIdHandler := connect.NewUnaryHandler(
		SingleFlatWithIdProcedure,
		svc.FlatWithId,
		connect.WithSchema(singleMethods.ByName("FlatWithId")),
		connect.WithHandlerOptions(opts...),
	)
	singleNestedHandler := connect.NewUnaryHandler(
		SingleNestedProcedure,
		svc.Nested,
		connect.WithSchema(singleMethods.ByName("Nested")),
		connect.WithHandlerOptions(opts...),
	)
	return "/test.v1.Single/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SingleFlatProcedure:
			singleFlatHandler.ServeHTTP(w, r)
		case SingleFlatWithIdProcedure:
			singleFlatWithIdHandler.ServeHTTP(w, r)
		case SingleNestedProcedure:
			singleNestedHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSingleHandler returns CodeUnimplemented from all methods.
type UnimplementedSingleHandler struct{}

func (UnimplementedSingleHandler) Flat(context.Context, *connect.Request[v1.ResourceRequest]) (*connect.Response[v1.Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("test.v1.Single.Flat is not implemented"))
}

func (UnimplementedSingleHandler) FlatWithId(context.Context, *connect.Request[v1.ResourceWithIdRequest]) (*connect.Response[v1.Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("test.v1.Single.FlatWithId is not implemented"))
}

func (UnimplementedSingleHandler) Nested(context.Context, *connect.Request[v1.NestedResourceRequest]) (*connect.Response[v1.Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("test.v1.Single.Nested is not implemented"))
}
