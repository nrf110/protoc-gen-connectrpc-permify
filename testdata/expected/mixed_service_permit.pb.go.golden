package testv1

func (req *SimpleRequest) GetChecks() pkg.CheckConfig {
    return pkg.CheckConfig {
        Type:   pkg.PUBLIC,
        Checks: []pkg.Check{},
    }
}

func (req *UserResource) GetChecks() pkg.CheckConfig {
    permission := "read"
    var checks []pkg.Check
    resource := req
    tenantId := "default"
    if req.CompanyId != "" {
        tenantId = req.CompanyId
    }
    check := pkg.Check {
        TenantID:     tenantId,
        Permission:   permission,
        Entity: &pkg.Resource {
            Type:       "User",
            ID:        req.UserId,
        },
    }
    checks = append(checks, check)
    return pkg.CheckConfig {
        Type:   pkg.SINGLE,
        Checks: checks,
    }
}

func (req *UserResource) GetChecks() pkg.CheckConfig {
    permission := "write"
    var checks []pkg.Check
    resource := req
    tenantId := "default"
    if req.CompanyId != "" {
        tenantId = req.CompanyId
    }
    check := pkg.Check {
        TenantID:     tenantId,
        Permission:   permission,
        Entity: &pkg.Resource {
            Type:       "User",
            ID:        req.UserId,
        },
    }
    checks = append(checks, check)
    return pkg.CheckConfig {
        Type:   pkg.SINGLE,
        Checks: checks,
    }
}

func (req *UserResource) GetChecks() pkg.CheckConfig {
    permission := "admin"
    var checks []pkg.Check
    resource := req
    tenantId := "default"
    if req.CompanyId != "" {
        tenantId = req.CompanyId
    }
    check := pkg.Check {
        TenantID:     tenantId,
        Permission:   permission,
        Entity: &pkg.Resource {
            Type:       "User",
            ID:        req.UserId,
        },
    }
    checks = append(checks, check)
    return pkg.CheckConfig {
        Type:   pkg.SINGLE,
        Checks: checks,
    }
}