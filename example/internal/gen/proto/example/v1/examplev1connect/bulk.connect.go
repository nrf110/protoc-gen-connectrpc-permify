// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/example/v1/bulk.proto

package examplev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/example/example-service/internal/gen/proto/example/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BulkName is the fully-qualified name of the Bulk service.
	BulkName = "example.v1.Bulk"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BulkSimpleProcedure is the fully-qualified name of the Bulk's Simple RPC.
	BulkSimpleProcedure = "/example.v1.Bulk/Simple"
	// BulkNestedProcedure is the fully-qualified name of the Bulk's Nested RPC.
	BulkNestedProcedure = "/example.v1.Bulk/Nested"
	// BulkRepeatsProcedure is the fully-qualified name of the Bulk's Repeats RPC.
	BulkRepeatsProcedure = "/example.v1.Bulk/Repeats"
	// BulkMappedProcedure is the fully-qualified name of the Bulk's Mapped RPC.
	BulkMappedProcedure = "/example.v1.Bulk/Mapped"
	// BulkNestedMappedProcedure is the fully-qualified name of the Bulk's NestedMapped RPC.
	BulkNestedMappedProcedure = "/example.v1.Bulk/NestedMapped"
)

// BulkClient is a client for the example.v1.Bulk service.
type BulkClient interface {
	Simple(context.Context, *connect_go.Request[v1.RepeatedResourceRequest]) (*connect_go.Response[v1.Response], error)
	Nested(context.Context, *connect_go.Request[v1.RepeatedResourceWithIdsRequest]) (*connect_go.Response[v1.Response], error)
	Repeats(context.Context, *connect_go.Request[v1.RepeatedResourceWithRepeatedIdsRequest]) (*connect_go.Response[v1.Response], error)
	Mapped(context.Context, *connect_go.Request[v1.MappedResourceRequest]) (*connect_go.Response[v1.Response], error)
	NestedMapped(context.Context, *connect_go.Request[v1.MappedResourceWithNestedMappedIdsRequest]) (*connect_go.Response[v1.Response], error)
}

// NewBulkClient constructs a client for the example.v1.Bulk service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBulkClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BulkClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bulkClient{
		simple: connect_go.NewClient[v1.RepeatedResourceRequest, v1.Response](
			httpClient,
			baseURL+BulkSimpleProcedure,
			opts...,
		),
		nested: connect_go.NewClient[v1.RepeatedResourceWithIdsRequest, v1.Response](
			httpClient,
			baseURL+BulkNestedProcedure,
			opts...,
		),
		repeats: connect_go.NewClient[v1.RepeatedResourceWithRepeatedIdsRequest, v1.Response](
			httpClient,
			baseURL+BulkRepeatsProcedure,
			opts...,
		),
		mapped: connect_go.NewClient[v1.MappedResourceRequest, v1.Response](
			httpClient,
			baseURL+BulkMappedProcedure,
			opts...,
		),
		nestedMapped: connect_go.NewClient[v1.MappedResourceWithNestedMappedIdsRequest, v1.Response](
			httpClient,
			baseURL+BulkNestedMappedProcedure,
			opts...,
		),
	}
}

// bulkClient implements BulkClient.
type bulkClient struct {
	simple       *connect_go.Client[v1.RepeatedResourceRequest, v1.Response]
	nested       *connect_go.Client[v1.RepeatedResourceWithIdsRequest, v1.Response]
	repeats      *connect_go.Client[v1.RepeatedResourceWithRepeatedIdsRequest, v1.Response]
	mapped       *connect_go.Client[v1.MappedResourceRequest, v1.Response]
	nestedMapped *connect_go.Client[v1.MappedResourceWithNestedMappedIdsRequest, v1.Response]
}

// Simple calls example.v1.Bulk.Simple.
func (c *bulkClient) Simple(ctx context.Context, req *connect_go.Request[v1.RepeatedResourceRequest]) (*connect_go.Response[v1.Response], error) {
	return c.simple.CallUnary(ctx, req)
}

// Nested calls example.v1.Bulk.Nested.
func (c *bulkClient) Nested(ctx context.Context, req *connect_go.Request[v1.RepeatedResourceWithIdsRequest]) (*connect_go.Response[v1.Response], error) {
	return c.nested.CallUnary(ctx, req)
}

// Repeats calls example.v1.Bulk.Repeats.
func (c *bulkClient) Repeats(ctx context.Context, req *connect_go.Request[v1.RepeatedResourceWithRepeatedIdsRequest]) (*connect_go.Response[v1.Response], error) {
	return c.repeats.CallUnary(ctx, req)
}

// Mapped calls example.v1.Bulk.Mapped.
func (c *bulkClient) Mapped(ctx context.Context, req *connect_go.Request[v1.MappedResourceRequest]) (*connect_go.Response[v1.Response], error) {
	return c.mapped.CallUnary(ctx, req)
}

// NestedMapped calls example.v1.Bulk.NestedMapped.
func (c *bulkClient) NestedMapped(ctx context.Context, req *connect_go.Request[v1.MappedResourceWithNestedMappedIdsRequest]) (*connect_go.Response[v1.Response], error) {
	return c.nestedMapped.CallUnary(ctx, req)
}

// BulkHandler is an implementation of the example.v1.Bulk service.
type BulkHandler interface {
	Simple(context.Context, *connect_go.Request[v1.RepeatedResourceRequest]) (*connect_go.Response[v1.Response], error)
	Nested(context.Context, *connect_go.Request[v1.RepeatedResourceWithIdsRequest]) (*connect_go.Response[v1.Response], error)
	Repeats(context.Context, *connect_go.Request[v1.RepeatedResourceWithRepeatedIdsRequest]) (*connect_go.Response[v1.Response], error)
	Mapped(context.Context, *connect_go.Request[v1.MappedResourceRequest]) (*connect_go.Response[v1.Response], error)
	NestedMapped(context.Context, *connect_go.Request[v1.MappedResourceWithNestedMappedIdsRequest]) (*connect_go.Response[v1.Response], error)
}

// NewBulkHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBulkHandler(svc BulkHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	bulkSimpleHandler := connect_go.NewUnaryHandler(
		BulkSimpleProcedure,
		svc.Simple,
		opts...,
	)
	bulkNestedHandler := connect_go.NewUnaryHandler(
		BulkNestedProcedure,
		svc.Nested,
		opts...,
	)
	bulkRepeatsHandler := connect_go.NewUnaryHandler(
		BulkRepeatsProcedure,
		svc.Repeats,
		opts...,
	)
	bulkMappedHandler := connect_go.NewUnaryHandler(
		BulkMappedProcedure,
		svc.Mapped,
		opts...,
	)
	bulkNestedMappedHandler := connect_go.NewUnaryHandler(
		BulkNestedMappedProcedure,
		svc.NestedMapped,
		opts...,
	)
	return "/example.v1.Bulk/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BulkSimpleProcedure:
			bulkSimpleHandler.ServeHTTP(w, r)
		case BulkNestedProcedure:
			bulkNestedHandler.ServeHTTP(w, r)
		case BulkRepeatsProcedure:
			bulkRepeatsHandler.ServeHTTP(w, r)
		case BulkMappedProcedure:
			bulkMappedHandler.ServeHTTP(w, r)
		case BulkNestedMappedProcedure:
			bulkNestedMappedHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBulkHandler returns CodeUnimplemented from all methods.
type UnimplementedBulkHandler struct{}

func (UnimplementedBulkHandler) Simple(context.Context, *connect_go.Request[v1.RepeatedResourceRequest]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("example.v1.Bulk.Simple is not implemented"))
}

func (UnimplementedBulkHandler) Nested(context.Context, *connect_go.Request[v1.RepeatedResourceWithIdsRequest]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("example.v1.Bulk.Nested is not implemented"))
}

func (UnimplementedBulkHandler) Repeats(context.Context, *connect_go.Request[v1.RepeatedResourceWithRepeatedIdsRequest]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("example.v1.Bulk.Repeats is not implemented"))
}

func (UnimplementedBulkHandler) Mapped(context.Context, *connect_go.Request[v1.MappedResourceRequest]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("example.v1.Bulk.Mapped is not implemented"))
}

func (UnimplementedBulkHandler) NestedMapped(context.Context, *connect_go.Request[v1.MappedResourceWithNestedMappedIdsRequest]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("example.v1.Bulk.NestedMapped is not implemented"))
}
